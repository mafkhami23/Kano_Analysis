# -*- coding: utf-8 -*-
"""KANO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HHgj3iuyFGcxl8B9eb0vhjZLu76J67pR

# Importing Data
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt

file_path = input("Enter the path or name of the Excel file (including the extension): ")

import seaborn as sns

# inputting the csv file
df = pd.read_csv(file_path)
df.head()

df.info()

dq=df # creating a duplicate

"""Cleaning the data and setting column headers

# Cleaning Data
"""

dq.columns = dq.iloc[0]
dq = dq.drop([0, 1])

dq.head()

# get a list of all the questions
dq.columns.values.tolist()

"""# **Location**"""

location = dq['In which state do you live?']

location.describe()

location.unique()

location.value_counts()

location.to_excel("/content/location.xlsx")

"""# A/B Testing; Tenure vs Satisfaction


"""

'How would you rank your satisfaction with your current ability to have flexible working hours? (e.g. not tied down to a strict 9am-5pm schedule)',
 'How important is the ability to have a flexible working location? (e.g. the ability to work remotely 100% of the week or some % or the week)',
 'How would you rank your satisfaction with your current ability to have a flexible working location? (e.g. the ability to work remotely 100% of the week or some % or the week)',
 'Please rate your level of satisfaction with your current flexible work environment. - Flexibility Policy',
 'Please rate your level of satisfaction with your current flexible work environment. - Policy Implementation',
 'Please rate your level of satisfaction with your current flexible work environment. - Professional Development',
 'Please rate your level of satisfaction with your current flexible work environment. - Mentorship',
 'Please rate your level of satisfaction with your current flexible work environment. - Personal + Work Boundaries',

AB_0 = dq[['How important is the ability to have flexible working hours? (e.g. not tied down to a strict 9am-5pm schedule)',
 'How long do you intend to stay at your current company? - Selected Choice']]

AB_0.head()

AB_0.info()

ACACAC = AB_0.groupby("How long do you intend to stay at your current company? - Selected Choice").value_counts()

ACACAC.head()

ACACAC.to_excel("/content/Tenure vs Satisfaction.xlsx")

# for categorical data
# This will give you the counts of each combination of values in your two categorical columns of interest.
contingency_table = pd.crosstab(df['How important is the ability to have flexible working hours? (e.g. not tied down to a strict 9am-5pm schedule)'], df['How long do you intend to stay at your current company? - Selected Choice'])

fig, ax = plt.subplots(figsize=(18, 16))
sns.heatmap(contingency_table, annot=True, cmap='coolwarm', ax = ax)
plt.show()

"""# A/B Testing; Age vs Days in Office"""

AB_1 = dq[["What year were you born in?","I typically work _____ day(s) in the office each week."]]

AB_1.head()

dq["I typically work _____ day(s) in the office each week."].info()

dq["I typically work _____ day(s) in the office each week."].value_counts()

dp = dq

dp["I typically work _____ day(s) in the office each week."] = dp["I typically work _____ day(s) in the office each week."].astype(float)

Project_Tenure = dq['How long do you intend to stay at your current company? - Selected Choice']

dq['How long do you intend to stay at your current company? - Selected Choice'].value_counts()

new_label = ['6 months or less','Over 6 months, up to 1 year','Over 1 year, up to 3 years','Over 3 years, up to 5 years','6-9 years',
               '10-20 years','20+ years']

dq['How long do you intend to stay at your current company? - Selected Choice']= dq['How long do you intend to stay at your current company? - Selected Choice'].astype('category').cat.set_categories(new_label)

dq['How long do you intend to stay at your current company? - Selected Choice'].value_counts()

dq['For how long have you been at your current company?'].value_counts()

# for categorical data
# This will give you the counts of each combination of values in your two categorical columns of interest.
contingency_table = pd.crosstab(df['For how long have you been at your current company?'], df['How long do you intend to stay at your current company? - Selected Choice'])

fig, ax = plt.subplots(figsize=(18, 16))
sns.heatmap(contingency_table, annot=True, cmap='coolwarm', ax = ax)
plt.show()

#Categorical plots show the relationship between a numerical and one or more categorical variables.
g = sns.catplot(data=dp, x='What year were you born in?', kind="violin",
                y='I typically work _____ day(s) in the office each week.', hue='How long do you intend to stay at your current company? - Selected Choice')
g.fig.set_figwidth(50)
g.fig.set_figheight(10)

#Categorical plots show the relationship between a numerical and one or more categorical variables.
g = sns.catplot(data=dp, x='What year were you born in?', kind="violin",
                y='I typically work _____ day(s) in the office each week.', hue="What year were you born in?")
g.fig.set_figwidth(50)
g.fig.set_figheight(10)

dq['What year were you born in?'].value_counts()

# define the custom order of the categories
custom_order = ['1965-1972','1973-1980','1981-1988','1989-1996','After 1996']

# convert the column to categorical data type with the custom order of categories
 dp['What year were you born in?'] = dp['What year were you born in?'].astype('category').cat.set_categories(custom_order)

gfg = sns.boxplot(x="What year were you born in?", y="I typically work _____ day(s) in the office each week.",
                  data=dp)
gfg.set_ylim([0, None])

ABABAB = AB_1.groupby("What year were you born in?").value_counts()

ABABAB.to_excel("/content/Ab Age and Office.xlsx")

Age_Importance = pd.DataFrame()

# Iterate through each column in the dataframe
for column in ds.columns:

    # Get the value counts for the column
    counts = ds.groupby("What year were you born in?")[column].value_counts()

    # Add the counts to the new dataframe
    Age_Importance[column] = counts

AB_1.to_excel("/content/Age vs Days in Office.xlsx")

Days_at_Office = dq["I typically work _____ day(s) in the office each week."]

Age = dq["What year were you born in?"]

Project_Tenure = dq['How long do you intend to stay at your current company? - Selected Choice']

Project_Tenure.head()

dq['How long do you intend to stay at your current company? - Selected Choice'].value_counts()

dq['For how long have you been at your current company?'].value_counts()

dg = dq

dg['How long do you intend to stay at your current company? - Selected Choice'] = dg['How long do you intend to stay at your current company? - Selected Choice'].map(dg['How long do you intend to stay at your current company? - Selected Choice'].value_counts())

dg['For how long have you been at your current company?'] = dg['For how long have you been at your current company?'].map(dg['For how long have you been at your current company?'].value_counts())

columns_of_interest = ['For how long have you been at your current company?', 'How long do you intend to stay at your current company? - Selected Choice']

corr_predictor = dg[columns_of_interest].corr()
sns.heatmap(corr_predictor, annot=True, cmap='coolwarm')



oo = dq['Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Other (please specify)']

Amenities_Functional_Other = dq['Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Other (please specify) - Text']

#Amenities_Functional_Other.isna().sum()
#Amenities_Functional_Other = Amenities_Functional_Other.dropna()

Amenities_Functional_Other.to_excel("/content/Amenities_Functional_Other.xlsx")

oo.to_excel("oo.xlsx")



uu = dq['Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Other (please specify)']

Amenities_DisFunctional_Other = dq[ 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Other (please specify) - Text']

#Amenities_DisFunctional_Other .isna().sum()
#Amenities_DisFunctional_Other  = Amenities_DisFunctional_Other .dropna()

Amenities_DisFunctional_Other .to_excel("/content/Amenities_DisFunctional_Other .xlsx")

uu.to_excel('uu.xlsx')





ww = dq['Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Other (please specify)']

Amenities_Importnace_Other = dq['Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Other (please specify) - Text']

#Amenities_Importnace_Other .isna().sum()
#Amenities_Importnace_Other = Amenities_DisFunctional_Other .dropna()

Amenities_Importnace_Other .to_excel("/content/Amenities_Importnace_Other  .xlsx")

ww.to_excel('ww.xlsx')



"""# **KNN**"""

X = dq[[ 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Ability to control environmental quality (e.g. temperature, lighting, sound)',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Access to natural daylight',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Murals & Art Installations',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Effective IT help desk',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Functional office technology',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Event space/Conference space',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Exterior patios & balconies with attractive views',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Outdoor space/Nature',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Parking',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Wellness room',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Catered lunch',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Free beverages/snacks',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Local/small business food and beverage kiosks',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site cafeteria',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Cutting edge "green practices"',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Game area/ ping pong tables/ arcade games etc',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Gym Access',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-Site fitness room',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Shipping/receiving for on-site personal deliveries',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Lifestyle Amenities (e.g. Dry cleaning services, pharmacy)',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site daycare center',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site medical clinic',]]

X.head()

X.info()

X.isna().sum()



# Define the Likert scale dictionary
likert_scale_dict = {'Not at all important': 1, 'Slightly important': 2, 'Moderately Important': 3, 'Very Important': 4, 'Extremely Important': 5}

# Apply the dictionary to the DataFrame to convert the qualitative phrases to ordinal values 
# X = X.applymap(lambda x: likert_scale_dict[x])
X = X.applymap(lambda x: likert_scale_dict[x] if pd.notnull(x) else np.nan)

X.head()

X.describe()

X.to_excel("/content/rrrr.xlsx")

Y_2 = dq['I typically work _____ day(s) in the office each week.']

# Change the series to dataframe
Y_2 = pd.DataFrame(dq['I typically work _____ day(s) in the office each week.'], columns=['I typically work _____ day(s) in the office each week.'])

Y_2.info()

Y_2.head()

Y_2.info()

# Define the mapping from categories to numerical values
mapping = {'6 months or less': 0, 
           'Over 6 months, up to 1 year': 1, 
           'Over 1 year, up to 3 years': 2, 
           'Over 3 years, up to 5 years': 3, 
           '6-9 years': 4, 
           '10-20 years': 5, 
           '20+ years': 6,
           'Unknown (please specify decision drivers)': 7}

# Replace the categorical values with numerical values using the mapping
Y = Y.replace(mapping)

Y.head()

from sklearn.neighbors import KNeighborsClassifier
from sklearn.feature_selection import SelectKBest, f_classif
import pandas as pd

# Initialize a KNN model
knn = KNeighborsClassifier()

# Initialize a SelectKBest object with f_classif as the score function
selector = SelectKBest(f_classif, k=9)

# Fit the selector object with X and y
selector.fit(X, Y_2)

# Print the features that have been selected
print(X.columns[selector.get_support()])

X_new = X[['Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Murals & Art Installations',
       'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Exterior patios & balconies with attractive views',
       'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Wellness room',
       'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Catered lunch',
       'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Local/small business food and beverage kiosks',
       'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Game area/ ping pong tables/ arcade games etc',
       'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Gym Access',
       'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Lifestyle Amenities (e.g. Dry cleaning services, pharmacy)',
       'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site daycare center']]

X_new.head()

from sklearn.preprocessing import StandardScaler
# Standardizing the features
X = StandardScaler().fit_transform(X)



X.tail()

X = X.drop(920)

X.tail()



"""# **Component Analysis**"""

finalDf = pd.concat([X, Y_2], axis =1)
finalDf.head()

!pip install prince

import prince
mca = prince.MCA(n_components=2)
mca.fit(finalDf)

# Access the MCA results
coordinates = mca.transform(finalDf)

coordinates

colors = {'1': 'red', '2': 'blue', '3': 'green', '4': 'orange', '5':'black'}
finalDf['Color'] = finalDf['I typically work _____ day(s) in the office each week.'].map(colors)

finalDf['count'] = range(1, len(finalDf) + 1)

finalDf.head()

plt.figure(figsize=(24, 12)) 
# Plot the MCA coordinates
plt.scatter(x = finalDf['count'],
            y = coordinates.iloc[:, 0],
            c=finalDf['Color'])

# Add labels to the points
#for i, txt in enumerate(finalDf['I typically work _____ day(s) in the office each week.']):
    #plt.annotate(txt, (coordinates.iloc[i, 0], coordinates.iloc[i, 1]))

# Set plot title and axes labels
plt.title('MCA Scatter Plot')
plt.xlabel('Employee ID')
plt.ylabel('Dimension 2')

# Display the plot
plt.show()

finalDf = finalDf.astype(float)

from prince import CA

# Assuming you have a contingency table or a DataFrame named df
ca = CA(n_components=2)  # Specify the number of dimensions/components to retain
ca.fit(finalDf)

# Access the row and column coordinates
row_coordinates = ca.row_coordinates(finalDf)
column_coordinates = ca.column_coordinates(finalDf)

plt.figure(figsize=(18, 6)) 
# Perform Singular Value Decomposition (SVD)
U, D, V = np.linalg.svd(ca.column_coordinates(finalDf).values)

# Calculate the eigenvalues
eigenvalues = (D ** 2) / (len(finalDf) - 1)

# Create a scatterplot using matplotlib
plt.scatter(row_coordinates.iloc[:, 0], row_coordinates.iloc[:, 1], label='Rows')
plt.scatter(column_coordinates.iloc[:, 0], column_coordinates.iloc[:, 1], label='Columns')

# Add labels to the points
#for i, txt in enumerate(finalDf.index):
    #plt.annotate(txt, (row_coordinates.iloc[i, 0], row_coordinates.iloc[i, 1]))

#for i, txt in enumerate(finalDf.columns):
    #plt.annotate(txt, (column_coordinates.iloc[i, 0], column_coordinates.iloc[i, 1]))

# Add legend and axis labels
plt.legend()
plt.xlabel('Dimension 1')
plt.ylabel('Dimension 2')

# Print the eigenvalues
print("Eigenvalues:\n", eigenvalues)

# Display the plot
plt.show()

plt.figure(figsize=(18, 6)) 

scatter = plt.scatter(
    x = finalDf['Count'],
    y = finalDf["PC1"],
    c = finalDf["I typically work _____ day(s) in the office each week."].values,
    cmap='Set1'
)

#plt.legend(handles=plt.scatter([], [], c=finalDf["I typically work _____ day(s) in the office each week."], cmap='Set1').legend_elements()[0], labels=legend_labels)
#legend_labels = finalDf["I typically work _____ day(s) in the office each week."].unique()
legend_labels = np.unique(finalDf["I typically work _____ day(s) in the office each week."].values)
#plt.legend(
   # handles=scatter.legend_elements()[0], 
   # labels=legend_labels
#)
handles, _ = scatter.legend_elements()
plt.legend(handles, legend_labels)


plt.title("Important of Amentity Access by Days working in Office")
plt.xlabel("Employee Count")
plt.ylabel("Score")
plt.show()

"""# **PCA**"""

explained_variarance # how much variance is explained by each component

from sklearn.decomposition import PCA # import library
pca = PCA(n_components=3) # create object, pass arcgument in the paranthesis
principalComponents = pca.fit_transform(X) # fit and transform the data
explained_variarance = pca.explained_variance_ratio_
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2','principal component 3'])
principalDf.head()

from sklearn.preprocessing import MinMaxScaler

scores = pca.transform(X)

# scale scores between 0 and 1
scaler = MinMaxScaler()
scaled_scores = scaler.fit_transform(scores)

# create dataframe from scaled scores
df_scaled = pd.DataFrame(scaled_scores, columns=['PC1', 'PC2', 'PC3'])

df_scaled

#Y_2 = Y_2.values.ravel()

principalDf.info()

Y_2.tail()

Y_2 = Y_2.drop(920)

finalDf = pd.concat([df_scaled, Y_2], axis =1)
finalDf.head()



finalDf = pd.concat([principalDf, Y_2], axis =1)
finalDf.head()

finalDf.to_excel('/content/klk.xlsx')





finalDf = pd.read_excel("/content/finalDF.xlsx")

finalDf.head()

finalDf.info()

# finalDf = finalDf.drop('Unnamed: 0', axis=1)

finalDf.head()

finalDf.shape[0]

plt.scatter(x = NYC['Location Longitude'],
            y = NYC['Location Latitude'],
            s = 0.05)



plt.figure(figsize=(18, 6)) 

scatter = plt.scatter(
    x = finalDf['Count'],
    y = finalDf["PC1"],
    c = finalDf["I typically work _____ day(s) in the office each week."].values,
    cmap='Set1'
)

#plt.legend(handles=plt.scatter([], [], c=finalDf["I typically work _____ day(s) in the office each week."], cmap='Set1').legend_elements()[0], labels=legend_labels)
#legend_labels = finalDf["I typically work _____ day(s) in the office each week."].unique()
legend_labels = np.unique(finalDf["I typically work _____ day(s) in the office each week."].values)
#plt.legend(
   # handles=scatter.legend_elements()[0], 
   # labels=legend_labels
#)
handles, _ = scatter.legend_elements()
plt.legend(handles, legend_labels)


plt.title("Important of Amentity Access by Days working in Office")
plt.xlabel("Employee Count")
plt.ylabel("Score")
plt.show()

fig = plt.figure(figsize = (10,10))
ax = fig.add_subplot(1,1,1,projection='3d') 
ax.set_xlabel('PC1', fontsize = 15)
ax.set_ylabel('PC2', fontsize = 15)
ax.set_zlabel('PC3', fontsize = 15)
ax.set_title('3 component PCA', fontsize = 20)
kinds = ['1','2','3','4','5']
colors = ['r', 'b','g','y']
for kind, color in zip(kinds,colors):
    indicesToKeep = finalDf['I typically work _____ day(s) in the office each week.'] == kind
    ax.scatter(finalDf.loc[indicesToKeep, 'PC1']
               , finalDf.loc[indicesToKeep, 'PC2']
               , finalDf.loc[indicesToKeep, 'PC3']
               , c = color
               , s = 50)
ax.legend(kinds)
ax.grid()
# for angle in range(0, 360):
ax.view_init(30,60)
plt.draw()
# plt.pause(.001)

fig = plt.figure(figsize = (10,10))
ax = fig.add_subplot(1,1,1) 
ax.set_xlabel('PC1', fontsize = 15)
ax.set_ylabel('PC2', fontsize = 15)
#ax.set_zlabel('Principal Component 3', fontsize = 15)
ax.set_title('2 component PCA', fontsize = 20)
kinds = ['1','2','3','4','5']
colors = ['r', 'b']
for kind, color in zip(kinds,colors):
    indicesToKeep = finalDf['I typically work _____ day(s) in the office each week.'] == kind
    ax.scatter(finalDf.loc[indicesToKeep, 'PC1']
               , finalDf.loc[indicesToKeep, 'PC2']
               , c = color
               , s = 50)
ax.legend(kinds)
ax.grid()

from sklearn.feature_selection import f_classif
f_classif(X,Y_2)
# first array is F value
# second array is p value

from sklearn import linear_model
from sklearn import preprocessing,neighbors
from sklearn.model_selection import cross_validate
from sklearn.model_selection import train_test_split
from __future__ import absolute_import,print_function, division

from sklearn.feature_selection import chi2
chi2(X_new, Y_2)

##search for an optimal value of K
from sklearn.model_selection import cross_val_score
k_range = range(1,15)
k_scores = []
for k in k_range:
  knn = neighbors.KNeighborsClassifier(n_neighbors=k)
  scores = cross_val_score(knn, X_new, Y_2, cv=5, scoring = "accuracy")
  k_scores.append(scores.mean())
print (k_scores)

import matplotlib.pyplot as plt
#plot the value of k for knn (x_axis) versus the cross_validated accuracy (y_value)
plt.plot(k_range, k_scores,color = "blue", linestyle = "dashed", marker = "o",
         markerfacecolor = "red", markersize = 10)
plt.xlabel("value of k for knn")
plt.ylabel("cross-validated accuracy")

from sklearn.model_selection import train_test_split

from sklearn.model_selection import cross_val_score
clf = neighbors.KNeighborsClassifier(n_neighbors=9) # number of K
scores = cross_val_score(clf, X, Y, cv=5) # check what is CV
scores

print(scores.mean())

"""# **Gender vs Satisfaction!!!**"""

GS = dq[['How would you rank your satisfaction with your current ability to have flexible working hours? (e.g. not tied down to a strict 9am-5pm schedule)',
 'How would you rank your satisfaction with your current ability to have a flexible working location? (e.g. the ability to work remotely 100% of the week or some % or the week)',
 'Please rate your level of satisfaction with your current flexible work environment. - Flexibility Policy',
 'Please rate your level of satisfaction with your current flexible work environment. - Policy Implementation',
 'Please rate your level of satisfaction with your current flexible work environment. - Professional Development',
 'Please rate your level of satisfaction with your current flexible work environment. - Mentorship',
 'Please rate your level of satisfaction with your current flexible work environment. - Personal + Work Boundaries',
 'How do you identify in terms of gender?']]

GS.head()

Gender_Satisfaction = pd.DataFrame()

# Iterate through each column in the dataframe
for column in GS.columns:

    # Get the value counts for the column
    counts = GS.groupby('How do you identify in terms of gender?')[column].value_counts()

    # Add the counts to the new dataframe
    Gender_Satisfaction[column] = counts

Gender_Satisfaction.head()

# Exporting the dataframe to excel
Gender_Satisfaction.to_excel('/content/Gender_Satisfaction.xlsx')

dq['How do you identify in terms of gender?'].value_counts





Gender_Satisfaction = Gender_Satisfaction[Gender_Satisfaction['How do you identify in terms of gender?'] != 'Agender']

#Categorical plots show the relationship between a numerical and one or more categorical variables.
g = sns.catplot(data=dp, x='What year were you born in?', kind="violin",
                y='I typically work _____ day(s) in the office each week.', hue='How long do you intend to stay at your current company? - Selected Choice')
g.fig.set_figwidth(50)
g.fig.set_figheight(10)

"""# **Gender vs Importance**"""

IG = dq[['How important is the ability to have flexible working hours? (e.g. not tied down to a strict 9am-5pm schedule)',
 'How important is the ability to have a flexible working location? (e.g. the ability to work remotely 100% of the week or some % or the week)',
  'How do you identify in terms of gender?']]

IG.head()

IG.info()

Gender_Importance = pd.DataFrame()

# Iterate through each column in the dataframe
for column in IG.columns:

    # Get the value counts for the column
    counts = IG.groupby('How do you identify in terms of gender?')[column].value_counts()

    # Add the counts to the new dataframe
    Gender_Importance[column] = counts

Gender_Importance.head()

# Exporting the dataframe to excel
Gender_Importance.to_excel('Gender_Importance.xlsx')

"""# **Misc**"""

dq['Please rank the following drivers for coming into the office (1 being the MOST important to you). - Other (please specify) - Text'].value_counts()

de = dq['IP Address']

de.to_csv("/content/IP-address.csv")

import socket

import requests

def get_location(ip, api_key):
    url = f'https://ipinfo.io/{ip}?token={api_key}'
    response = requests.get(url)
    data = response.json()
    city = data.get('city', 'Unknown')
    country = data.get('country', 'Unknown')
    return f'{city}, {country}'

# read in the Series containing IP addresses
s = pd.read_csv('/content/IP-address.csv', squeeze=True)

s.head()

for ip in s['IP Address']:
    try:
        hostname = socket.gethostbyaddr(ip)
        print(f'{ip}: {hostname}')
    except socket.herror:
        print(f'{ip}: Unknown hostname')

"""# **Merge_Location**"""

dg =pd.read_csv('/content/geo-ip.csv')

ds = dq

merged_df = pd.merge(ds, dg, on='IP Address')

NYC = merged_df[merged_df['State/Province'] == 'New York']

NYC.columns

NYC.City.value_counts()

"""# **Satisfaction vs Generation!!!**"""

GS_1 = dq[['How would you rank your satisfaction with your current ability to have flexible working hours? (e.g. not tied down to a strict 9am-5pm schedule)',
 'How would you rank your satisfaction with your current ability to have a flexible working location? (e.g. the ability to work remotely 100% of the week or some % or the week)',
 'Please rate your level of satisfaction with your current flexible work environment. - Flexibility Policy',
 'Please rate your level of satisfaction with your current flexible work environment. - Policy Implementation',
 'Please rate your level of satisfaction with your current flexible work environment. - Professional Development',
 'Please rate your level of satisfaction with your current flexible work environment. - Mentorship',
 'Please rate your level of satisfaction with your current flexible work environment. - Personal + Work Boundaries',
 'What year were you born in?']]

GS_1.head()

GS.info()

Generation_Satisfaction = pd.DataFrame()

# Iterate through each column in the dataframe
for column in GS_1.columns:

    # Get the value counts for the column
    counts = GS_1.groupby('What year were you born in?')[column].value_counts()

    # Add the counts to the new dataframe
    Generation_Satisfaction[column] = counts

Generation_Satisfaction.info()

Generation_Satisfaction.head()

# Exporting the dataframe to excel
Generation_Satisfaction.to_excel('/content/Generation_Satisfaction.xlsx')

"""# **Importance vs Generation**"""

IG_1 = dq[['How important is the ability to have flexible working hours? (e.g. not tied down to a strict 9am-5pm schedule)',
 'How important is the ability to have a flexible working location? (e.g. the ability to work remotely 100% of the week or some % or the week)',
  'What year were you born in?']]

IG_1.head()

IG_1.info()

Generation_Importance = pd.DataFrame()

# Iterate through each column in the dataframe
for column in IG_1.columns:

    # Get the value counts for the column
    counts = IG_1.groupby('What year were you born in?')[column].value_counts()

    # Add the counts to the new dataframe
    Generation_Importance[column] = counts

Generation_Importance.head()

# Exporting the dataframe to excel
Generation_Importance.to_excel('Generation_Importance.xlsx')

"""# **Amenity vs Generation**"""

GA = dq[['Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Ability to control environmental quality (e.g. temperature, lighting, sound)',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Access to natural daylight',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Murals & Art Installations',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Effective IT help desk',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Functional office technology',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Event space/Conference space',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Exterior patios & balconies with attractive views',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Outdoor space/Nature',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Parking',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Wellness room',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Catered lunch',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Free beverages/snacks',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Local/small business food and beverage kiosks',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site cafeteria',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Cutting edge "green practices"',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Game area/ ping pong tables/ arcade games etc',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Gym Access',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-Site fitness room',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Shipping/receiving for on-site personal deliveries',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Lifestyle Amenities (e.g. Dry cleaning services, pharmacy)',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site daycare center',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site medical clinic',
 'What year were you born in?']]

GA.head()

GA.info()



GA['What year were you born in?'].value_counts()

GA.tail()

Generation_Amentiy = pd.DataFrame()

# Iterate through each column in the dataframe
for column in GA.columns:

    # Get the value counts for the column
    counts = GA.groupby('What year were you born in?')[column].value_counts()

    # Add the counts to the new dataframe
    Generation_Amentiy[column] = counts

Generation_Amentiy.head()

# Exporting the dataframe to excel
Generation_Amentiy.to_excel('/content/Generation_Amentiy.xlsx')

#Categorical plots show the relationship between a numerical and one or more categorical variables.
g = sns.catplot(data=dp, x='What year were you born in?', kind="violin",
                y='I typically work _____ day(s) in the office each week.', hue='What year were you born in?')
g.fig.set_figwidth(50)
g.fig.set_figheight(10)

sns.boxplot(x="What year were you born in?", y="I typically work _____ day(s) in the office each week.",
                  data=dp)

gfg = sns.boxplot(x="What year were you born in?", y="I typically work _____ day(s) in the office each week.",
                  data=dp)
gfg.set_ylim([0, None])

"""# **Amenity vs Company Size**"""



CA = dq[['Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Ability to control environmental quality (e.g. temperature, lighting, sound)',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Access to natural daylight',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Murals & Art Installations',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Effective IT help desk',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Functional office technology',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Event space/Conference space',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Exterior patios & balconies with attractive views',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Outdoor space/Nature',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Parking',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Wellness room',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Catered lunch',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Free beverages/snacks',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Local/small business food and beverage kiosks',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site cafeteria',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Cutting edge "green practices"',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Game area/ ping pong tables/ arcade games etc',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Gym Access',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-Site fitness room',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Shipping/receiving for on-site personal deliveries',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Lifestyle Amenities (e.g. Dry cleaning services, pharmacy)',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site daycare center',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site medical clinic',
 'How many employees are currently employed at your company?']]

CA.head()

Company_Size_Amentiy = pd.DataFrame()

# Iterate through each column in the dataframe
for column in CA.columns:

    # Get the value counts for the column
    counts = CA.groupby('How many employees are currently employed at your company?')[column].value_counts()

    # Add the counts to the new dataframe
    Company_Size_Amentiy[column] = counts

Company_Size_Amentiy.head()

Company_Size_Amentiy.to_excel("/content/Company_Size_Amentiy.xlsx")

"""# **Functional_Company Size**"""

Func_size = dq[['Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Ability to control environmental quality (e.g. temperature, lighting, sound)',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Access to natural daylight',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Murals & Art Installations',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Effective IT help desk',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Functional office technology',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Event space/Conference space',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Exterior patios & balconies with attractive views',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Outdoor space/Nature',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Parking',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Wellness room',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Catered lunch',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Free beverages/snacks',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Local/small business food and beverage kiosks',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - On-site cafeteria',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Cutting edge "green practices"',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Game area/ ping pong tables/ arcade games etc',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Gym Access',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - On-Site fitness room',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Shipping/receiving for on-site personal deliveries',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Lifestyle Amenities (e.g. Dry cleaning services, pharmacy)',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - On-site daycare center',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - On-site medical clinic',
 'How many employees are currently employed at your company?']]



Func_size .head()

Company_Size_Functional = pd.DataFrame()

# Iterate through each column in the dataframe
for column in Func_size.columns:

    # Get the value counts for the column
    counts = Func_size.groupby('How many employees are currently employed at your company?')[column].value_counts()

    # Add the counts to the new dataframe
    Company_Size_Functional[column] = counts

Company_Size_Functional.head()

Company_Size_Functional.to_excel("/content/Company_Size_Functional.xlsx")

"""# **Dysfunctional_Company Size**"""



Dysfunc_size = dq[['Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Ability to control environmental quality (e.g. temperature, lighting, sound)',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Access to natural daylight',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Murals & Art Installations',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Effective IT help desk',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Functional office technology',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Event space/Conference space',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Exterior patios & balconies with attractive views',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Outdoor space/Nature',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Parking',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Wellness room',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Catered lunch',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Free beverages/snacks',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Local/small business food and beverage kiosks',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - On-site cafeteria',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Cutting edge "green practices"',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Game area/ ping pong tables/ arcade games etc',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Gym Access',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - On-Site fitness room',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Shipping/receiving for on-site personal deliveries',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - Lifestyle Amenities (e.g. Dry cleaning services, pharmacy)',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - On-site daycare center',
 'Please answer the following questions regarding workplace amenities. - How do you feel if you do not have this amenity? - On-site medical clinic',
 'How many employees are currently employed at your company?']]

Dysfunc_size .head()

Company_Size_Dysfunctional = pd.DataFrame()

# Iterate through each column in the dataframe
for column in Dysfunc_size.columns:

    # Get the value counts for the column
    counts = Dysfunc_size.groupby('How many employees are currently employed at your company?')[column].value_counts()

    # Add the counts to the new dataframe
    Company_Size_Dysfunctional[column] = counts

Company_Size_Dysfunctional.head()

Company_Size_Dysfunctional.to_excel("/content/Company_Size_Dysfunctional.xlsx")







"""# **Amenity vs Days in Office**"""

dq["I typically work _____ day(s) in the office each week."] = dq["I typically work _____ day(s) in the office each week."].astype(float)

AD = dq[['Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Ability to control environmental quality (e.g. temperature, lighting, sound)',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Access to natural daylight',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Murals & Art Installations',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Effective IT help desk',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Functional office technology',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Event space/Conference space',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Exterior patios & balconies with attractive views',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Outdoor space/Nature',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Parking',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Wellness room',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Catered lunch',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Free beverages/snacks',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Local/small business food and beverage kiosks',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site cafeteria',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Cutting edge "green practices"',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Game area/ ping pong tables/ arcade games etc',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Gym Access',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-Site fitness room',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Shipping/receiving for on-site personal deliveries',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Lifestyle Amenities (e.g. Dry cleaning services, pharmacy)',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site daycare center',
 'Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - On-site medical clinic',
 'I typically work _____ day(s) in the office each week.']]

AD.head()

Days_in_Office_Amentiy = pd.DataFrame()

# Iterate through each column in the dataframe
for column in AD.columns:

    # Get the value counts for the column
    counts = AD.groupby('I typically work _____ day(s) in the office each week.')[column].value_counts()

    # Add the counts to the new dataframe
    Days_in_Office_Amentiy[column] = counts

Days_in_Office_Amentiy.head()

Days_in_Office_Amentiy.to_excel("/content/Days_in_Office_Amentiy.xlsx")

"""# Office Assets"""

NearOffice = [ 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Architectural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Childcare',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Coffee shops',
 "What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Doctors' Offices",
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Dog park',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Event space/Conference space',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Extracurricular Activities/Hobbies',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Fitness centers',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Green space/Nature',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Live music',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Mass transit access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Museums/cultural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Parking access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Pet care',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Quiet Escape',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Restaurants',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Shopping Options',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Other (Please specify)',]

NearOffice_Other = dq['What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Other (Please specify) - Text']

"""Neighborhood Assets_Office"""

NearOffice_Other.head()

NearOffice_Other.isna().sum()

NearOffice_Other = NearOffice_Other.dropna()

NearOffice_Other.to_excel("/content/Office_neighbor_Asset_other.xlsx")

Asset_Office = dq[NearOffice]

Asset_Office.head()

Assets_Office = pd.DataFrame()

# Iterate through each column in the dataframe
for column in Asset_Office.columns:

    # Get the value counts for the column
    counts = Asset_Office[column].value_counts()

    # Add the counts to the new dataframe
    Assets_Office[column] = counts

Assets_Office.head()

Office_Neighbor_Asset = Assets_Office.to_excel("/content/Office_neighbor_Asset.xlsx")





"""# **Office Assets_State**"""

SAO = merged_df [['What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Architectural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Childcare',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Coffee shops',
 "What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Doctors' Offices",
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Dog park',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Event space/Conference space',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Extracurricular Activities/Hobbies',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Fitness centers',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Green space/Nature',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Live music',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Mass transit access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Museums/cultural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Parking access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Pet care',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Quiet Escape',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Restaurants',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Shopping Options',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Other (Please specify)',
 'State/Province']]

State_Assets_Office = pd.DataFrame()

# Iterate through each column in the dataframe
for column in SAO.columns:

    # Get the value counts for the column
    counts = SAO.groupby('State/Province')[column].value_counts()

    # Add the counts to the new dataframe
    State_Assets_Office[column] = counts

State_Assets_Office.head()

State_Assets_Office["What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Architectural attractions"].describe()

for column in State_Assets_Office.columns:

    # Get the value counts for the column
    counts = SAO.groupby('State/Province')[column].value_counts()

    # Add the counts to the new dataframe
    State_Assets_Office[column] = counts

State_Assets_Office.to_excel("/content/State_Assets_Office.xlsx")

SAO['State/Province'].value_counts()



NSAO = NYC[['What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Architectural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Childcare',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Coffee shops',
 "What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Doctors' Offices",
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Dog park',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Event space/Conference space',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Extracurricular Activities/Hobbies',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Fitness centers',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Green space/Nature',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Live music',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Mass transit access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Museums/cultural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Parking access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Pet care',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Quiet Escape',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Restaurants',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Shopping Options',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Other (Please specify)',
 'City']]

NYC_Assets_Office = pd.DataFrame()

# Iterate through each column in the dataframe
for column in NSAO.columns:

    # Get the value counts for the column
    counts = NSAO.groupby('City')[column].value_counts()

    # Add the counts to the new dataframe
    NYC_Assets_Office[column] = counts

NYC_Assets_Office.head()

NYC_Assets_Office.to_excel("/content/NYC_Assets_Office.xlsx")

State_Assets_Office["What kinds of neighborhood assets do you look for? Select all that apply. - Near the office - Architectural attractions"].describe()

NHA = NYC[['What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Architectural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Childcare',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Coffee shops',
 "What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Doctors' Offices",
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Dog park',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Event space/Conference space',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Extracurricular Activities/Hobbies',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Fitness centers',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Green space/Nature',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Live music',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Mass transit access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Museums/cultural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Parking access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Pet care',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Quiet Escape',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Restaurants',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Shopping Options',
 'City']]



NYC_Near_House = pd.DataFrame()

# Iterate through each column in the dataframe
for column in NHA:

    # Get the value counts for the column
    counts = NHA.groupby('City')[column].value_counts()

    # Add the counts to the new dataframe
    NYC_Near_House[column] = counts

NYC_Near_House.head()

NYC_Near_House .to_excel("/content/NYC_Near_House.xlsx")

"""# Near Home Assett"""

NearHome = ['What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Architectural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Childcare',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Coffee shops',
 "What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Doctors' Offices",
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Dog park',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Event space/Conference space',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Extracurricular Activities/Hobbies',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Fitness centers',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Green space/Nature',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Live music',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Mass transit access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Museums/cultural attractions',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Parking access',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Pet care',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Quiet Escape',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Restaurants',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Shopping Options',
 'What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Other (Please specify)',]

Asset_Home = dq[NearHome]

Near_House = pd.DataFrame()

# Iterate through each column in the dataframe
for column in Asset_Home.columns:

    # Get the value counts for the column
    counts = Asset_Home[column].value_counts()

    # Add the counts to the new dataframe
    Near_House[column] = counts

Home_Neighbor_Asset = Near_House.to_excel("/content/Home_neighbor_Asset.xlsx")







NearHome_Other = dq['What kinds of neighborhood assets do you look for? Select all that apply. - Near your home - Other (Please specify) - Text']

NearHome_Other.isna().sum()

NearHome_Other = NearHome_Other.dropna()

NearHome_Other.to_excel("/content/Home_neighbor_Asset_other.xlsx")





"""# Driver_ Work From Office"""

Coming_Office_Drivers = ['Please rank the following drivers for coming into the office (1 being the MOST important to you). - Access to office-wide technology',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Additional space',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Personal desk set-up',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Overall design and aesthetics',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Team meetings',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Office Events',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Proximity to collaborators/team members',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Access to workplace amenities',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Change of environment',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Impromptu collaboration',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Professional Development Opportunities',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Mentorship',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Increased visibility',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Private Focus Space',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Other (please specify)',]

Driver_Office = dq[Coming_Office_Drivers]

Incentive_Office = pd.DataFrame()

# Iterate through each column in the dataframe
for column in Driver_Office.columns:

    # Get the value counts for the column
    counts = Driver_Office[column].value_counts()

    # Add the counts to the new dataframe
    Incentive_Office[column] = counts

Work_Office_Asset = Incentive_Office.to_excel("/content/Work_Office_Asset.xlsx")



Driver_Office_Other = dq['Please rank the following drivers for coming into the office (1 being the MOST important to you). - Other (please specify) - Text']

Driver_Office_Other.isna().sum()

Driver_Office_Other = Driver_Office_Other.dropna()

Driver_Office_Other .to_excel("/content/Driver_Office_Other.xlsx")





"""# Driver_ Work From Home"""

Home_Drivers = ['Please rank the following drivers for working remotely (1 being the MOST important to you). - Health & safety',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Reduced commute time',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Personal desk set-up',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Ability to control environment (e.g. lighting, temperature, etc.)',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Lack of dress code',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Flexibility to balance work and personal responsibilities',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Overall design and aesthetics',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - More time with friends/family',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Ability to travel',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Increased focus + productivity',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Avoiding of office politics',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Lower stress environment',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Increased focus on mental and physical wellbeing',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Other (please specify)',]

Driver_Home = dq[Home_Drivers]

Incentive_Home = pd.DataFrame()

# Iterate through each column in the dataframe
for column in Driver_Home.columns:

    # Get the value counts for the column
    counts = Driver_Home[column].value_counts()

    # Add the counts to the new dataframe
    Incentive_Home[column] = counts

Incentive_Home.head(15)

Work_Home_Asset = Incentive_Home.to_excel("/content/Work_Home_Asset.xlsx")





Driver_Remote_Other = dq['Please rank the following drivers for working remotely (1 being the MOST important to you). - Other (please specify) - Text']

Driver_Remote_Other.isna().sum()

Driver_Remote_Other = Driver_Remote_Other.dropna()

Driver_Remote_Other.to_excel("/content/Driver_Remote_Other.xlsx")







"""# **Agree_Disagree_Generation**"""

AGG = dq[['How strongly do you agree or disagree with the following statements? - I feel more motivated working in a group or seeing others around me being productive.',
 'How strongly do you agree or disagree with the following statements? - Having strong soft skills (e.g. people or interpersonal skills) are just as important, or more important, than having strong technical skills.',
 'How strongly do you agree or disagree with the following statements? - I need established boundaries to be able to "turn off" outside of work.',
 'How strongly do you agree or disagree with the following statements? - I wish my office had more space for impromptu conversations and collaboration.',
 'How strongly do you agree or disagree with the following statements? - I feel most productive when I work from home or another location outside of the office.',
 'How strongly do you agree or disagree with the following statements? - My office having a casual dress code increases my willingness to work in-person.',
 'How strongly do you agree or disagree with the following statements? - The design of my workplace is flexible and able to adapt to change.',
 'How strongly do you agree or disagree with the following statements? - I have the ability to make choices to better regulate the environment for me and my team (e.g. temperature control, access to fresh air, lighting levels).',
 'How strongly do you agree or disagree with the following statements? - I am more engaged with my colleagues and workplace culture when I work from the office.',
 'How strongly do you agree or disagree with the following statements? - My overall wellbeing has improved since working in a flexible work environment.',
 'How strongly do you agree or disagree with the following statements? - My overall satisfaction with my job has improved since working in a flexible work environment.',
 'How strongly do you agree or disagree with the following statements? - I was quickly and easily able to adopt new technology when starting remote work during the COVID-19 pandemic.',
 'What year were you born in?']]

AGG.head()

AGG.info()

Agree_disagree_generation = pd.DataFrame()

# Iterate through each column in the dataframe
for column in GS_1.columns:

    # Get the value counts for the column
    counts = GS_1.groupby('What year were you born in?')[column].value_counts()

    # Add the counts to the new dataframe
    Agree_disagree_generation[column] = counts

Agree_disagree_generation.info()

Agree_disagree_generation.head()

# Exporting the dataframe to excel
Agree_disagree_generation.to_excel('/content/Agree_disagree_generation.xlsx')





















"""# Agree_disagree"""

Opinion = [ 'How strongly do you agree or disagree with the following statements? - I feel more motivated working in a group or seeing others around me being productive.',
 'How strongly do you agree or disagree with the following statements? - Having strong soft skills (e.g. people or interpersonal skills) are just as important, or more important, than having strong technical skills.',
 'How strongly do you agree or disagree with the following statements? - I need established boundaries to be able to "turn off" outside of work.',
 'How strongly do you agree or disagree with the following statements? - I wish my office had more space for impromptu conversations and collaboration.',
 'How strongly do you agree or disagree with the following statements? - I feel most productive when I work from home or another location outside of the office.',
 'How strongly do you agree or disagree with the following statements? - My office having a casual dress code increases my willingness to work in-person.',
 'How strongly do you agree or disagree with the following statements? - The design of my workplace is flexible and able to adapt to change.',
 'How strongly do you agree or disagree with the following statements? - I have the ability to make choices to better regulate the environment for me and my team (e.g. temperature control, access to fresh air, lighting levels).',
 'How strongly do you agree or disagree with the following statements? - I am more engaged with my colleagues and workplace culture when I work from the office.',
 'How strongly do you agree or disagree with the following statements? - My overall wellbeing has improved since working in a flexible work environment.',
 'How strongly do you agree or disagree with the following statements? - My overall satisfaction with my job has improved since working in a flexible work environment.',
 'How strongly do you agree or disagree with the following statements? - I was quickly and easily able to adopt new technology when starting remote work during the COVID-19 pandemic.',]

Opinion_List = dq[Opinion]

Agree_Not = pd.DataFrame()

# Iterate through each column in the dataframe
for column in Opinion_List.columns:

    # Get the value counts for the column
    counts = Opinion_List[column].value_counts()

    # Add the counts to the new dataframe
    Agree_Not[column] = counts

Agree_Disagrere =Agree_Not.to_excel("/content/Agree_Disagrere .xlsx")

dq["What year were you born in?"].describe()

# setting the age as a seperate dataframe
dage = dq["What year were you born in?"]

# creating a sub-dataframe from the ranking questions
da = dq.iloc[:, 47:120]

da.head(2)

# Creating a subset for the functional section of the questions
da_func=da.iloc[:,:23]

da_func.head(2)

# adding the age back
da_func['What year were you born in?'] = dage

da_func.info()

!pip install pivottablejs

from pivottablejs import pivot_ui

#da_func= da_func.astype(float)

"""# Age Break"""

da_func.groupby("What year were you born in?").size()

req_by_group = da_func.groupby("What year were you born in?")['Please answer the following questions regarding workplace amenities. - How do you feel if you have this amenity? - Ability to control environmental quality (e.g. temperature, lighting, sound)'].value_counts()

da_func.columns

da_func.info()

#dp=da_func.groupby("What year were you born in?")[da_func.columns[21]].value_counts()

#dp.head()

#dp.to_excel('/content/q22.xlsx')

Age = pd.DataFrame()

# Iterate through each column in the dataframe
for column in da_func.columns:

    # Get the value counts for the column
    counts = da_func.groupby("What year were you born in?")[column].value_counts()

    # Add the counts to the new dataframe
    Age[column] = counts

Age.head()

# Exporting the dataframe to excel
Age.to_excel('/content/Functional by Age.xlsx')



"""# **Gender vs drivers_Office**"""

# GD_1 = dq[["How do you identify in terms of gender?","I typically work _____ day(s) in the office each week."]]

#Gender = dq["How do you identify in terms of gender?"]

dq["How do you identify in terms of gender?"].value_counts()

dq["How do you identify in terms of gender?"].isnull().sum()

dq["How do you identify in terms of gender?"]

Driver_Office

GD_1 = dq[['Please rank the following drivers for coming into the office (1 being the MOST important to you). - Access to office-wide technology',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Additional space',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Personal desk set-up',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Overall design and aesthetics',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Team meetings',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Office Events',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Proximity to collaborators/team members',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Access to workplace amenities',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Change of environment',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Impromptu collaboration',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Professional Development Opportunities',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Mentorship',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Increased visibility',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Private Focus Space',
 'Please rank the following drivers for coming into the office (1 being the MOST important to you). - Other (please specify)',
 "How do you identify in terms of gender?"]]

GD_1.tail()

GD_1.info()

GD_1 = GD_1.iloc[1:]

GD_1.head()

Gender_Office_Drive = pd.DataFrame()

# Iterate through each column in the dataframe
for column in GD_1.columns:

    # Get the value counts for the column
    counts = GD_1.groupby("How do you identify in terms of gender?")[column].value_counts()

    # Add the counts to the new dataframe
    Gender_Office_Drive [column] = counts

Gender_Office_Drive.head()

# Exporting the dataframe to excel
Gender_Office_Drive.to_excel('/content/Gender_Office_Drive.xlsx')

"""# **Gender vs drivers_Home**"""

GD_2 = dq[['Please rank the following drivers for working remotely (1 being the MOST important to you). - Health & safety',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Reduced commute time',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Personal desk set-up',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Ability to control environment (e.g. lighting, temperature, etc.)',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Lack of dress code',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Flexibility to balance work and personal responsibilities',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Overall design and aesthetics',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - More time with friends/family',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Ability to travel',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Increased focus + productivity',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Avoiding of office politics',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Lower stress environment',
 'Please rank the following drivers for working remotely (1 being the MOST important to you). - Increased focus on mental and physical wellbeing',
 "How do you identify in terms of gender?"]]

GD_2.head()

GD_2.info()

Gender_Home_Drive = pd.DataFrame()

# Iterate through each column in the dataframe
for column in GD_2.columns:

    # Get the value counts for the column
    counts = GD_2.groupby("How do you identify in terms of gender?")[column].value_counts()

    # Add the counts to the new dataframe
    Gender_Home_Drive [column] = counts

Gender_Home_Drive.head()

# Exporting the dataframe to excel
Gender_Home_Drive.to_excel('/content/Gender_Home_Drive.xlsx')



"""# Year at Company Break"""

Predictor_1 = ['How strongly do you agree or disagree with the following statements? - I feel more motivated working in a group or seeing others around me being productive.',
 'How strongly do you agree or disagree with the following statements? - Having strong soft skills (e.g. people or interpersonal skills) are just as important, or more important, than having strong technical skills.',
 'How strongly do you agree or disagree with the following statements? - I need established boundaries to be able to "turn off" outside of work.',
 'How strongly do you agree or disagree with the following statements? - I wish my office had more space for impromptu conversations and collaboration.',
 'How strongly do you agree or disagree with the following statements? - I feel most productive when I work from home or another location outside of the office.',
 'How strongly do you agree or disagree with the following statements? - My office having a casual dress code increases my willingness to work in-person.',
 'How strongly do you agree or disagree with the following statements? - The design of my workplace is flexible and able to adapt to change.',
 'How strongly do you agree or disagree with the following statements? - I have the ability to make choices to better regulate the environment for me and my team (e.g. temperature control, access to fresh air, lighting levels).',
 'How strongly do you agree or disagree with the following statements? - I am more engaged with my colleagues and workplace culture when I work from the office.',
 'How strongly do you agree or disagree with the following statements? - My overall wellbeing has improved since working in a flexible work environment.',
 'How strongly do you agree or disagree with the following statements? - My overall satisfaction with my job has improved since working in a flexible work environment.',
 'How strongly do you agree or disagree with the following statements? - I was quickly and easily able to adopt new technology when starting remote work during the COVID-19 pandemic.']

Predictor_1 = dq[Predictor_1]

Predictor_1.head()

Predictor_1.info()

Years_at_company = dq['For how long have you been at your current company?']

Years_at_company.info()

Years_at_company.value_counts()

Predictor_1['For how long have you been at your current company?'] = Years_at_company

Predictor_1.head()

Years_at_company_2 = pd.DataFrame()

# Iterate through each column in the dataframe
for column in Predictor_1.columns:

    # Get the value counts for the column
    counts = Predictor_1.groupby('For how long have you been at your current company?')[column].value_counts()

    # Add the counts to the new dataframe
    Years_at_company_2[column] = counts

Years_at_company_2.head()

Years_at_company_2.to_excel('/content/Years_at_company.xlsx')

# KNN







"""# Data Split; Functional """

dt = df.iloc[:, 47:120]

# print the new DataFrame
dt.head()

dt.columns = dt.iloc[0]

dt.head()

dt = dt.drop([0, 1])

dt.head()

# remove text from all column headers
new_columns = dt.columns.str.replace('Please answer the following questions regarding workplace amenities. -', '')
dt.columns = new_columns

dt.head()

df.info()

dt.info()

dothers = df.iloc[:, 118:120]

dothers.columns = dothers.iloc[0]

dothers = dothers.drop([0, 1])

dothers.head()

dothers.info()

dothers['Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Other (please specify) - Text'].unique()



dothers['Please answer the following questions regarding workplace amenities. - How important is it for you to have access to this amenity? - Other (please specify) - Text'].to_excel('/content/Others_Importance.xlsx')

dothers['Are there any other amenities you would like to have access to in your workplace? Please list below.'].to_excel('/content/Others.xlsx')

dothers['Are there any other amenities you would like to have access to in your workplace? Please list below.'].unique()

dfunc=dt.iloc[:,:23]

dfunc.head()

dfunc.info()

dfunc1= dfunc

dfunc1.head()

# remove text from all column headers
abb_columns = dfunc1.columns.str.replace('How do you feel if you have this amenity? - ', '')
dfunc1.columns = abb_columns

#dfunc1= dfunc1.astype(float)

dfunc1.info()

dfunc1[' How do you feel if you have this amenity? - Ability to control environmental quality (e.g. temperature, lighting, sound)'].value_counts()

"""**Grouping the columns based on frequency**"""

value_counts = pd.DataFrame()

# Iterate through each column in the dataframe
for column in dfunc1.columns:

    # Get the value counts for the column
    counts = dfunc1[column].value_counts()

    # Add the counts to the new dataframe
    value_counts[column] = counts

value_counts.head()

value_counts.to_excel('/content/functionalByFrequency.xlsx')

#scale_mapper = {"off-site":0, "on-site":1}
#df["model"] = df["Kind"].replace(scale_mapper)

#import seaborn as sns

# Increase the size of the heatmap.
plt.figure(figsize=(16, 6))
# Store heatmap object in a variable to easily access it when you want to include more features (such as title).
# Set the range of values to be displayed on the colormap from -1 to 1, and set the annotation to True to display the correlation values on the heatmap.
heatmap = sns.heatmap(value_counts.corr(), vmin=-1, vmax=1, annot=True)
# Give a title to the heatmap. Pad defines the distance of the title from the top of the heatmap.
heatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12);

corr = value_counts.corr()
f, ax = plt.subplots(figsize=(25, 16))
# Generate a mask for upper traingle
mask = np.triu(np.ones_like(corr, dtype=bool)) 
# Configure a custom diverging colormap 
cmap = sns.diverging_palette(230, 20, as_cmap=True) #
# Draw the heatmap 
sns.heatmap(corr, annot=True, mask = mask, cmap=cmap)

for i in dfunc1.columns: 
   dfunc1[i].value_counts().plot(kind = 'bar')
   plt.title(i)
   plt.show()

#dfunctional = round(dfunc1.mean())

#ds = dfunctional.to_excel('/content/functional.xlsx')

"""# Data Split; Dysfunctional """



ddys=dt.iloc[:,24:47]

ddys.head()

ddys.info()

"""**Grouping the columns based on frequency**"""

value_counts_dys = pd.DataFrame()

# Iterate through each column in the dataframe
for column in ddys.columns:

    # Get the value counts for the column
    counts = ddys[column].value_counts()

    # Add the counts to the new dataframe
    value_counts_dys[column] = counts

value_counts_dys

value_counts_dys.to_excel('/content/DisfunctionalByFrequency.xlsx')

#scale_mapper = {"off-site":0, "on-site":1}
#df["model"] = df["Kind"].replace(scale_mapper)

de = dds.to_excel('/content/disfunctional.xlsx')

"""# Data Split; Importance"""

dw = dt.iloc[:,48:71]

dw.head()

value_counts_importance = pd.DataFrame()

# Iterate through each column in the dataframe
for column in dw.columns:

    # Get the value counts for the column
    counts = dw[column].value_counts()

    # Add the counts to the new dataframe
    value_counts_importance[column] = counts



"""**Importance by Age**"""

ds=dw

ds

dage

#ds = ds.drop(columns = "What year were you born in?")

ds.insert(0,"What year were you born in?", dage)

ds

ds.set_index(["What year were you born in?"], inplace=True)

ds.columns.tolist

ds.groupby("What year were you born in?")[" How important is it for you to have access to this amenity? - Ability to control environmental quality (e.g. temperature, lighting, sound)"].value_counts()

Age_Importance = pd.DataFrame()

# Iterate through each column in the dataframe
for column in ds.columns:

    # Get the value counts for the column
    counts = ds.groupby("What year were you born in?")[column].value_counts()

    # Add the counts to the new dataframe
    Age_Importance[column] = counts

Age_Importance

Age_Importance.to_excel('/content/Ageweight.xlsx')

value_counts_importance.to_excel('/content/weight.xlsx')

"""**Concating the Data**"""

result = pd.concat([dfunc1, ddys, dw])

result.info()

result.head()